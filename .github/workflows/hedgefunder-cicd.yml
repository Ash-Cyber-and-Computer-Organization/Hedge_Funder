name: HedgeFunder CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # ---------- FRONTEND ----------
  frontend:
    name: Build & Deploy Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: frontend
        run: npm install

      - name: Run tests
        working-directory: frontend
        run: npm run test --if-present

      - name: Build React app
        working-directory: frontend
        run: npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  # ---------- BACKEND ----------
  backend:
    name: Build & Deploy Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run backend tests
        working-directory: backend
        run: |
          python -m pytest test_finnhub_integration.py test_news_aggregator.py --maxfail=1 --disable-warnings -q

      - name: Build Docker image
        run: docker build -t hedgefunder-backend ./backend

      - name: Push to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - run: docker push ${{ secrets.DOCKER_USERNAME }}/hedgefunder-backend:latest

      # Optional: Deploy to Render/Heroku/VPS
      - name: Deploy to Render
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}

  # ---------- N8N WORKFLOWS ----------
  n8n:
    name: Export & Commit n8n Workflows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Export workflows via API
        run: |
          mkdir -p n8n-workflows
          curl -s -H "Authorization: Bearer ${{ secrets.N8N_API_KEY }}" \
          https://your-n8n-instance.com/rest/workflows \
          -o n8n-workflows/workflows.json || echo "n8n export failed, continuing..."

      - name: Commit workflow JSON
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add n8n-workflows/workflows.json || echo "No workflows to add"
          git commit -m "chore: update n8n workflows [skip ci]" || echo "No changes to commit"
          git push || echo "Push failed, continuing..."

  # ---------- SECURITY SCANNING ----------
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ---------- LINTING & FORMATTING ----------
  lint:
    name: Lint & Format Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install frontend linting tools
        working-directory: frontend
        run: npm install eslint prettier --save-dev

      - name: Lint frontend code
        working-directory: frontend
        run: npx eslint src/ --ext .js,.jsx,.ts,.tsx || echo "Linting failed, continuing..."

      - name: Format frontend code
        working-directory: frontend
        run: npx prettier --write src/ || echo "Formatting failed, continuing..."

      - name: Install Python linting tools
        working-directory: backend
        run: pip install flake8 black

      - name: Lint Python code
        working-directory: backend
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Python linting failed, continuing..."

      - name: Format Python code
        working-directory: backend
        run: black . || echo "Python formatting failed, continuing..."
